public class Hasan_Diamond implements Comparable<Hasan_Diamond>{     private String stockNumber, clarity, cut;private double carot;private char color;//smaller index means better clarity or colorprivate String[] claritycodes = {"FL", "IF", "VVS1", "VVS2", "VS1", "VS2","SI1", "SI2", "I1", "I2", "I3"};//each color index represents two color codes that are equal to one clarity code//it says in the assignment DE's array indexes is equal to FL array index,FG's index is equal to IF and so onprivate char[] colorcode1 = {'D', 'F', 'H', 'J', 'L', 'N', 'P', 'R', 'T', 'V','X', 'Z'}; //EVEN INDEXprivate char[] colorcode2 = {'E', 'G', 'I', 'K', 'M', 'O', 'Q', 'S', 'U', 'W', 'Y'}; //ODD INDEX//constructor argument taking in the stock, carot, clarity, color, and cutwhen a new object is createdpublic Hasan_Diamond (String stck, double car, String clar, char col, String ct){stockNumber = stck;carot = car;clarity = clar;color = col;cut = ct;}public String getStockNumber(){return stockNumber;}public String getClarity(){return clarity;}public String getCut(){return cut;}public char getColor(){return color;}public double getCarot(){return carot;}public String toString() {return  "ID: " + "Stock number: " + stockNumber +"\n" +"Size: " + carot + " carots\n" +"Clarity Grade: " + clarity + "\n" +"Color Grade: " + color + "\n" +"Type of cut: " + cut + " cut\n";  }public int compareTo(Hasan_Diamond other) 
{if(this.getCarot()<other.getCarot())return 1;else if(this.getCarot()>other.getCarot())return -1;else {   int thisIndex = getBestofClarityorColor(this);   int otherIndex = getBestofClarityorColor(other);  if(thisIndex < otherIndex)return -1;  else if(otherIndex < thisIndex)return 1;  else      {  //comparing the clarity of other object  int clarityOtherIndex = -1;  String clarOther = other.getClarity();    for(int i = 0; i <claritycodes.length; i++){if(clarOther.equals(claritycodes[i])){clarityOtherIndex = i; break;}}  //comparing the clarity of this object  int clarityThisIndex = -1;  String clarThis = this.getClarity();  for(int i = 0; i <claritycodes.length; i++){if(clarThis.equals(claritycodes[i])){clarityThisIndex = i; break;}}     if(clarityThisIndex < clarityOtherIndex)   return -1;   else if(clarityOtherIndex < clarityThisIndex)   return 1;     if(clarityThisIndex == clarityOtherIndex)   {     //now it compares the color of OTHER OBJECT   int colorOtherIndex = -1;   char colOther = other.getColor();for(int p = 0; p<colorcode1.length; p++){if(colOther == colorcode1[p]){colorOtherIndex = p;break;}}//compares the color of THIS INDEXint colorThisIndex = -1;char colThis = other.getColor();for(int p = 0; p<colorcode1.length; p++){if(colThis == colorcode1[p])
{colorThisIndex = p;break;}}  if(colorThisIndex < colorOtherIndex)return -1;else if(colorOtherIndex < colorThisIndex)return 1;           }    }    return 0;}}//private int private int getBestofClarityorColor(Hasan_Diamond o){        int clarityindex = -1;String clar = o.getClarity();for(int i = 0; i <claritycodes.length; i++){if(clar.equals(claritycodes[i])){clarityindex = i; break;}}int colorindex = -1;char col = o.getColor();for(int p = 0; p<colorcode1.length; p++){if(col == colorcode1[p]){colorindex = p;System.out.println(colorindex);break;}}if(colorindex ==-1) {for(int p = 0; p<colorcode2.length; p++){if(col == colorcode2[p]){colorindex = p;break;}}}if(clarityindex < colorindex){System.out.println(colorindex);return colorindex;}
System.out.println(clarityindex);return clarityindex;}}